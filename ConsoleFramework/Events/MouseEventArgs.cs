using System;
using ConsoleFramework.Controls;
using ConsoleFramework.Core;

namespace ConsoleFramework.Events {

    public delegate void MouseEventHandler(object sender, MouseEventArgs e);

    public delegate void MouseButtonEventHandler(object sender, MouseButtonEventArgs e);

    public delegate void MouseWheelEventHandler(object sender, MouseWheelEventArgs e);

    public enum MouseButtonState
    {
        Released,
        Pressed
    }

    public class MouseWheelEventArgs : MouseEventArgs
    {
        public MouseWheelEventArgs(object source, RoutedEvent routedEvent, Point rawPosition,
                                    MouseButtonState leftButton, MouseButtonState middleButton,
                                    MouseButtonState rightButton, int delta)
            : base(source, routedEvent, rawPosition, leftButton, middleButton, rightButton) {
            Delta = delta;
        }

        public int Delta {
            get;
            private set;
        }
    }

    public enum MouseButton
    {
        Left,
        Middle,
        Right
    }

    public class MouseButtonEventArgs : MouseEventArgs
    {
        private readonly MouseButton button;
        private readonly int clickCount;
        private readonly bool autoRepeat;

        public MouseButtonEventArgs(object source, RoutedEvent routedEvent)
            : base(source, routedEvent) {
        }

        public MouseButtonEventArgs(object source, RoutedEvent routedEvent, Point rawPosition,
                                    MouseButtonState leftButton, MouseButtonState middleButton,
                                    MouseButtonState rightButton,
                                    MouseButton button, int clickCount = 1,
                                    bool autoRepeat = false)
            : base(source, routedEvent, rawPosition, leftButton, middleButton, rightButton) {
            this.button = button;
            this.clickCount = clickCount;
            this.autoRepeat = autoRepeat;
        }

        public MouseButtonState ButtonState {
            get {
                switch (button) {
                    case MouseButton.Left:
                        return LeftButton;
                    case MouseButton.Middle:
                        return MiddleButton;
                    case MouseButton.Right:
                        return RightButton;
                }
                throw new InvalidOperationException("This code should not be reached.");
            }
        }

        public MouseButton ChangedButton {
            get { return button; }
        }

        public int ClickCount {
            get { return clickCount; }
        }

        /// <summary>
        /// Returns true if this event is autogenerated by timer tick
        /// (if user presses and holds left mouse button, for example).
        /// </summary>
        public bool AutoRepeat {
            get { return autoRepeat; }
        }
    }


    public class MouseEventArgs : RoutedEventArgs
    {
        public MouseEventArgs(object source, RoutedEvent routedEvent) : base(source, routedEvent) {
        }

        public MouseEventArgs(object source, RoutedEvent routedEvent, Point rawPosition,
                              MouseButtonState leftButton, MouseButtonState middleButton, MouseButtonState rightButton)
            : base(source, routedEvent) {
            //
            RawPosition = rawPosition;
            LeftButton = leftButton;
            MiddleButton = middleButton;
            RightButton = rightButton;
        }

        public Point RawPosition { get; }

        public MouseButtonState LeftButton { get; }

        public MouseButtonState MiddleButton { get; }

        public MouseButtonState RightButton { get; }
        
        /// <summary>
        /// Returns translated coords, relative to specified control.
        /// Can return negative values (or greater than ActualWidth/ActualHeight)
        /// if control is capturing mouse input.
        /// </summary>
        public Point GetPosition(Control relativeTo) {
            return Control.TranslatePoint(null, RawPosition, relativeTo);
        }
    }
}